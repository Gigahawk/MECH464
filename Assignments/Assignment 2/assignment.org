#+TITLE: MECH 464 Homework Assignment 2
#+AUTHOR: Jasper Chan - 37467164 @@latex:\\@@ jasperchan515@gmail.com

#+OPTIONS: toc:nil H:5 num:t


#+LATEX_HEADER: \definecolor{bg}{rgb}{0.95,0.95,0.95}
#+LATEX_HEADER: \setminted{frame=single,bgcolor=bg,samepage=true}
#+LATEX_HEADER: \setlength{\parindent}{0pt}
#+LATEX_HEADER: \sisetup{per-mode=fraction}
#+LATEX_HEADER: \usepackage[shellescape]{gmp}
#+LATEX_HEADER: \usepackage{gauss}
#+LATEX_HEADER: \usepackage{float}
#+LATEX_HEADER: \usepackage{svg}
#+LATEX_HEADER: \usepackage{cancel}
#+LATEX_HEADER: \usepackage{amssymb}
#+LATEX_HEADER: \usepackage{accents}
#+LATEX_HEADER: \usepackage{titlesec}
#+LATEX_HEADER: \usepackage{mathtools, nccmath}
#+LATEX_HEADER: \newcommand{\Lwrap}[1]{\left\{#1\right\}}
#+LATEX_HEADER: \newcommand{\Lagr}[1]{\mathcal{L}\Lwrap{#1}}
#+LATEX_HEADER: \newcommand{\Lagri}[1]{\mathcal{L}^{-1}\Lwrap{#1}}
#+LATEX_HEADER: \newcommand{\Ztrans}[1]{\mathcal{Z}\Lwrap{#1}}
#+LATEX_HEADER: \newcommand{\Ztransi}[1]{\mathcal{Z}^{-1}\Lwrap{#1}}
#+LATEX_HEADER: \newcommand{\ZOH}[1]{\text{ZOH}\left(#1\right)}
#+LATEX_HEADER: \DeclarePairedDelimiter{\ceil}{\lceil}{\rceil}
#+LATEX_HEADER: \makeatletter \AtBeginEnvironment{minted}{\dontdofcolorbox} \def\dontdofcolorbox{\renewcommand\fcolorbox[4][]{##4}} \makeatother
#+LATEX_HEADER: \titleformat{\paragraph}[hang]{\normalfont\normalsize\bfseries}{\theparagraph}{1em}{}
#+LATEX_HEADER: \titlespacing*{\paragraph}{0pt}{3.25ex plus 1ex minus .2ex}{0.5em}
#+LATEX_HEADER: \setcounter{secnumdepth}{5}
#+LATEX_HEADER: \newcommand\munderbar[1]{\underaccent{\bar}{#1}}
#+LATEX_HEADER: \newcommand\dmunderbar[1]{\munderbar{\munderbar{#1}}}
#+LATEX_HEADER: \newcommand{\norm}[1]{\| #1 \|}
#+LATEX_HEADER: \newcommand*\phantomrel[1]{\mathrel{\phantom{#1}}}% My preferred typesetting

* Exercise 1
Find the inverse of the following $4 \times 4$ matrix, where the $3 \times 3$ matrix is a rotation.

\begin{equation*}
\begin{bmatrix}
    Q   & d \\
    0^T & 1
\end{bmatrix}
\end{equation*}

** Solution
The blockwise matrix inversion formula is given as:
\begin{align*}
\begin{bmatrix}
    \mathbf{A} & \mathbf{B} \\
    \mathbf{C} & \mathbf{D}
\end{bmatrix}^{-1}
&=
\begin{bmatrix}
    \mathbf{A}^{-1} + \mathbf{A}^{-1}\mathbf{B}\left(\mathbf{D} - \mathbf{CA}^{-1}\mathbf{B}\right)^{-1}\mathbf{CA}^{-1} &
    -\mathbf{A}^{-1}\mathbf{B}\left(\mathbf{D} - \mathbf{CA}^{-1}\mathbf{B}\right)^{-1} \\
    -\left(\mathbf{D} - \mathbf{CA}^{-1}\mathbf{B}\right)^{-1}\mathbf{CA}^{-1} &
    \left(\mathbf{D} - \mathbf{CA}^{-1}\mathbf{B}\right)^{-1}
\end{bmatrix}
\end{align*}

We note that the only blocks that need to be inverted are $\mathbf{A}$ and $\mathbf{D} - \mathbf{CA}^{-1}\mathbf{B}$.

For the first block, we are given $\mathbf{A} = Q$, which is a proper rotation matrix.
The inverse of a rotation matrix $Q^{-1}$ is just the transpose $Q^T$.

Subbing in the values for the other block:
\begin{align*}
\left(\mathbf{D} - \mathbf{CA}^{-1}\mathbf{B}\right)^{-1}
&=
\left(
    (1) - (0^T)(Q^T)(d)
\right)^{-1} \\
&= (1)^{-1} \\
&= 1
\end{align*}

Subbing everything in:
\begin{align*}
\begin{bmatrix}
Q   & d \\
0^T & 1
\end{bmatrix}^{-1}
&=
\begin{bmatrix}
    Q^T + Q^Td\left(1 - 0Q^Td\right)^{-1}0Q^T &
    -Q^Td\left(1 - 0Q^Td\right)^{-1} \\
    -\left(1 - 0Q^Td\right)^{-1}0Q^T &
    \left(1 - 0Q^Td\right)^{-1}
\end{bmatrix} \\
&=
\begin{bmatrix}
    Q^T &
    -Q^Td \\
    0^T &
    1
\end{bmatrix} \\
\end{align*}

* Exercise 2
** Question 1
A vector product function is specified as
$\dmunderbar{f}(x) = (-2\munderbar{i}_0 + 3\munderbar{j}_0 - 5\munderbar{k}_0) \times \munderbar{x}$.

What is the matrix representation of
$\dmunderbar{f}$
in
$\munderbar{C}_0 = \begin{bmatrix}\munderbar{i}_0 & \munderbar{j}_0 & \munderbar{k}_0\end{bmatrix}$?

What is the matrix representation of
$\dmunderbar{f}$
in
$\munderbar{C}_1 = \begin{bmatrix}\munderbar{i}_1 & \munderbar{j}_1 & \munderbar{k}_1\end{bmatrix} = \begin{bmatrix}-\munderbar{i}_0 & -\munderbar{j}_0 & \munderbar{k}_0\end{bmatrix}$?
*** Solution
**** Matrix representation in \underbar{$C$}_0
Rewriting the provided definition of $\munderbar{C}_0$:
\begin{align*}
\dmunderbar{f}(x)
&=
\munderbar{C}_0
\underbrace{
    \begin{bmatrix}
        -2 \\ 3 \\ -5
    \end{bmatrix}
}_{^0s}
\times \munderbar{x}
\end{align*}

We can then group the vector with the skew operator:
\begin{align*}
\dmunderbar{f}(x)
&=
\munderbar{C}_0
\underbrace{
    \left(
        \begin{bmatrix}
            -2 \\ 3 \\ -5
        \end{bmatrix}
        \times
    \right)
}_{^0s \times}
\munderbar{x}
\\
&=
\munderbar{C}_0
\begin{bmatrix}
     0 &  5 & 3 \\
    -5 &  0 & 2 \\
    -3 & -2 & 0
\end{bmatrix}
\munderbar{x}
\end{align*}
The matrix representation of the function is then:
\begin{align*}
{^0s} \times
&=
\begin{bmatrix}
     0 &  5 & 3 \\
    -5 &  0 & 2 \\
    -3 & -2 & 0
\end{bmatrix}
\end{align*}
**** Matrix representation in \underbar{$C$}_1
We note that
\begin{align*}
\munderbar{C}_0 &= \munderbar{C}_1 {^1C_0}
\end{align*}

If we sub in the definitions of $\munderbar{C}_{0,1}$ using the $\munderbar{C}_0$ unit vectors and solve for ${^1C_0}$[fn:transformmatrix]:
\begin{align*}
\begin{bmatrix}
    \munderbar{i}_0 &
    \munderbar{j}_0 &
    \munderbar{k}_0
\end{bmatrix}
&=
\begin{bmatrix}
    -\munderbar{i}_0 &
    -\munderbar{j}_0 &
     \munderbar{k}_0
\end{bmatrix}
{^1C_0} \\
&= 
\begin{bmatrix}
    -\munderbar{i}_0 &
    -\munderbar{j}_0 &
     \munderbar{k}_0
\end{bmatrix}
\begin{bmatrix}
    -1 &  0 & 0 \\
     0 & -1 & 0 \\
     0 &  0 & 1
\end{bmatrix}
\end{align*}
[fn:transformmatrix] Coincidentally ${^0C_1} = {^1C_0}$





The matrix representation in $\munderbar{C}_1$ is then:
\begin{align*}
{^1s} \times
&=
\left(
    {^0C_1}
    {^0s}
\right)
\times
\\
&=
\left(
    \begin{bmatrix}
        -1 &  0 & 0 \\
        0 & -1 & 0 \\
        0 &  0 & 1
    \end{bmatrix}
    \begin{bmatrix}
        -2 \\ 3 \\ -5
    \end{bmatrix}
\right)
\times
\\
&=
\begin{bmatrix}
    2 \\ -3 \\ -5
\end{bmatrix}
\times
\\
&=
\begin{bmatrix}
     0 &  5 & -3 \\
    -5 &  0 & -2 \\
     3 &  2 &  0
\end{bmatrix}
\end{align*}
** Question 2
What is the coordinate representation
${^0Q}$
in
$\munderbar{C}_0$
of a rotation
$\munderbar{y} = \dmunderbar{Q}\left(\munderbar{k}_0, \frac{\pi}{2}\right)\munderbar{x}$
about axis
$\munderbar{k}_0$
of angle
$\pi/2$?
*** Solution
The rotation matrix about the $\munderbar{k}$ axis (in any frame) is:
\begin{align*}
R(k, \theta)
\triangleq
\begin{bmatrix}
    \cos\theta & -\sin\theta & 0 \\
    \sin\theta &  \cos\theta & 0 \\
    0          &  0          & 1
\end{bmatrix}
\end{align*}

Subbing in our values:
\begin{align*}
{^0Q}
=
R(k, \frac{\pi}{2})
&=
\begin{bmatrix}
    \cos\frac{\pi}{2} & -\sin\frac{\pi}{2} & 0 \\
    \sin\frac{\pi}{2} &  \cos\frac{\pi}{2} & 0 \\
    0                 &  0                 & 1
\end{bmatrix}
\\
&=
\begin{bmatrix}
    0 & -1 & 0 \\
    1 &  0 & 0 \\
    0 &  0 & 1
\end{bmatrix}
\end{align*}


** Question 3
What is the coordinate representation
${^0R}$
in
$\munderbar{C}_0$
of a rotation
$\munderbar{y} = \dmunderbar{R}\left(\munderbar{i}_0, \frac{\pi}{6}\right)\munderbar{x}$
about axis
$\munderbar{i}_0$
of angle
$\pi/6$?
*** Solution
The rotation matrix about the $\munderbar{i}$ axis (in any frame) is:
\begin{align*}
R(i, \theta)
\triangleq
\begin{bmatrix}
    1 & 0          & 0 \\
    0 & \cos\theta & -\sin\theta \\
    0 & \sin\theta &  \cos\theta 
\end{bmatrix}
\end{align*}

Subbing in our values:
\begin{align*}
{^0Q}
=
R(k, \frac{\pi}{6})
&=
\begin{bmatrix}
    1 & 0                 & 0 \\
    0 & \cos\frac{\pi}{6} & -\sin\frac{\pi}{6} \\
    0 & \sin\frac{\pi}{6} &  \cos\frac{\pi}{6} 
\end{bmatrix}
\\
&=
\begin{bmatrix}
    1 & 0                  & 0 \\
    0 & \frac{\sqrt{3}}{2} & -\frac{1}{2} \\
    0 & \frac{1}{2}        & \frac{\sqrt{3}}{2} 
\end{bmatrix}
\end{align*}
** Question 4
What is the coordinate representation of the composition of the two rotations
$\munderbar{y} = \dmunderbar{R}\left(\munderbar{i}_0, \frac{\pi}{6}\right) \dmunderbar{Q}\left(\munderbar{k}_0, \frac{\pi}{2}\right)\munderbar{x}$
in
$\munderbar{C}_0$?
*** Solution

Multiplying our two rotation matrices together:
\begin{align*}
{^0R}{^0Q}
&=
\begin{bmatrix}
    1 & 0                  &  0 \\
    0 & \frac{\sqrt{3}}{2} & -\frac{1}{2} \\
    0 & \frac{1}{2}        &  \frac{\sqrt{3}}{2} 
\end{bmatrix}
\begin{bmatrix}
    0 & -1 & 0 \\
    1 &  0 & 0 \\
    0 &  0 & 1
\end{bmatrix} \\
&=
\begin{bmatrix}
    0                  & -1 &  0 \\
    \frac{\sqrt{3}}{2} &  0 & -\frac{1}{2} \\
    \frac{1}{2}        &  0 &  \frac{\sqrt{3}}{2}
\end{bmatrix}
\triangleq
{^0S}
\end{align*}
** Question 5
Let
$\munderbar{C}_1$
be the rotated frame
$\munderbar{C}_1 = \dmunderbar{Q}\left(\munderbar{k}_0, \frac{\pi}{2}\right)\munderbar{C}_0$.

What is the coordinate representation of the composition of the two rotations
$\munderbar{y} = \dmunderbar{R}\left(\munderbar{i}_0, \frac{\pi}{6}\right) \dmunderbar{Q}\left(\munderbar{k}_0, \frac{\pi}{2}\right)\munderbar{x}$
in
$\munderbar{C}_1$?
*** Solution
Rewriting the rotated frame using the coordinate representation ${^0Q}$:
\begin{align*}
\munderbar{C}_1
=
\dmunderbar{Q}\left(\munderbar{k}_0, \frac{\pi}{2}\right)\munderbar{C}_0
&=
\munderbar{C}_0\underbrace{^0Q}_{^0C_1}
\end{align*}

The coordinate representation of the composite rotation in $\munderbar{C}_1$ is then:
\begin{align*}
{^1S}
&=
\left(
    {^1C_0}
\right)
{^0S}
\\
&=
\left(
    {^0C_1}
\right)^{-1}
{^0S}
\\
&=
\left(
    {^0Q}
\right)^{-1}
{^0S}
\\
&=
{^0Q}^T
{^0S}
\\
&=
\begin{bmatrix}
     0 & 1 & 0 \\
    -1 & 0 & 0 \\
     0 & 0 & 1
\end{bmatrix}
\begin{bmatrix}
    0                  & -1 &  0 \\
    \frac{\sqrt{3}}{2} &  0 & -\frac{1}{2} \\
    \frac{1}{2}        &  0 &  \frac{\sqrt{3}}{2}
\end{bmatrix} \\
&=
\begin{bmatrix}
    \frac{\sqrt{3}}{2} & 0 & -\frac{1}{2} \\
    0                  & 1 &  0 \\
    \frac{1}{2}        & 0 &  \frac{\sqrt{3}}{2}
\end{bmatrix}
\end{align*}

* Exercise 3
Write a Simulink model to integrate
$\dot{Q} = \omega \times Q$,
$\dot{\omega} = \tau$,
$\omega(0) = 0$,
$Q(0) = I$,
driven by a specified torque $\tau$.
Animate the motion (block provided in Simulink tutorial, can use a frame or other) whose coordinate transformation is given by $Q$.
This corresponds to your animating a rigid body having an inertia matrix equal to the identity.
Does the matrix $Q(t)$ remain a rotation matrix for all $t$ as you integrate it?
If not, how would you fix it?
Provide $Q(t)$ and the animation (or just last image) for the following cases:

1. $\tau = \begin{bmatrix}0 &  0 & 1 \end{bmatrix}^T, t = \SI{5}{\second}$
2. $\tau = \begin{bmatrix}0 & -1 & 1 \end{bmatrix}^T, t = \SI{8}{\second}$
3. $\tau = \begin{bmatrix}1 &  1 & -1\end{bmatrix}^T, t = \SI{4}{\second}$

** Solution
#+begin_src matlab :session :exports none :eval never-export
simulink
#+end_src

#+RESULTS:
: org_babel_eoe

First let's define a skew helper function:
#+begin_src matlab :exports code :tangle skew.m :eval never
function sx = skew(s)
    sx = [...
         0    -s(3)  s(2);...
         s(3)  0    -s(1);...
        -s(2)  s(1)  0];
end
#+end_src

As indicated by the question, $Q$ will not remain a rotation matrix since Simulink uses numerical methods with finite precision;
the length of the rotation axis will change over time.

Let's define a helper function to fix this error:
#+begin_src matlab :exports code :tangle ensure_rotation.m :eval never
function Q = ensure_rotation(Q_dirty)
    lambdas = eig(Q_dirty);
    % Get eigenvalue with positive imaginary part to  find positive theta
    thetas = imag(log(lambdas));
    theta = thetas(thetas > 0);
    if isempty(theta)
        % No rotation, treat as identity
        Q = eye(3);
        return
    end
    % Extract rotation axis
    sx_dirty = logm(Q_dirty)/theta;
    s_dirty = [sx_dirty(3, 2); -sx_dirty(3, 1); sx_dirty(2, 1)];
    % Ensure rotation axis is unit length
    s = s_dirty/norm(s_dirty);
    % Reconstruct rotation matrix
    Q = expm(theta*skew(s));
end
#+end_src

We also need a scene for our VR Sink to display, so let's define that here:
#+begin_src perl :exports both :tangle SingleBox.wrl :eval
#VRML V2.0 utf8

Viewpoint {
   position 0 -5 5
   orientation 1 0 0 0.78
   fieldOfView 1
   description "Camera 1"
}

DirectionalLight {
    direction 1 1 0
}

DEF Box Transform {
  rotation 0 0 1 0
  children Shape {
    appearance Appearance {
      material Material {
        diffuseColor 1 1 0
      }
    }
    geometry Box {
        size 1 2 3
    }
  }
}
#+end_src

With this, we can create our Simulink model:
#+begin_src matlab :session :exports none :results none
% dummy value so system loads properly
tau = [0; 0; 1];
open_system('exercise3');
print -dsvg -s 'exercise3.svg'
#+end_src

#+begin_src bash :results output :exports none
inkscape exercise3.svg --export-text-to-path --export-plain-svg -o exercise3_fixed.svg
#+end_src

#+RESULTS:

[[file:exercise3_fixed.svg]]


*** $\tau = \begin{bmatrix}0 &  0 & 1 \end{bmatrix}^T, t = \SI{5}{\second}$
Running our simulation with the specified parameters:
#+begin_src matlab :session :exports both :results code output
tau = [0; 0; 1];
out = sim('exercise3', 5);
Q_last = out.Q.Data(:,:,end)
#+end_src

#+RESULTS:
#+begin_src matlab
#+end_src

Note the video stream coming from the VR Sink is in a slightly different format than what is expected from the To Multimedia File block, we need to post-process the video in ~ffmpeg~ to get the orientation right:
#+begin_src bash :results output :exports both
ffmpeg -y -i output.avi \
       -vf "transpose=0,transpose=0" \
       -c:v libx264 -crf 22 transposed.mp4
#+end_src

#+RESULTS:

Grabbing the last frame:
#+begin_src bash :results output :exports both
ffmpeg -y -sseof -3 -i transposed.mp4 -vsync 0 -update true out1.png
#+end_src

#+RESULTS:

[[file:out1.png]]


*** $\tau = \begin{bmatrix}0 & -1 & 1 \end{bmatrix}^T, t = \SI{8}{\second}$
Running our simulation with the specified parameters:
#+begin_src matlab :session :exports both :results code output
tau = [0; -1; 1];
out = sim('exercise3', 8);
Q_last = out.Q.Data(:,:,end)
#+end_src

#+RESULTS:
#+begin_src matlab
Q_last =
    0.3276   -0.6617   -0.6744
    0.6744    0.6637   -0.3236
    0.6617   -0.3489    0.6637
#+end_src

Note the video stream coming from the VR Sink is in a slightly different format than what is expected from the To Multimedia File block, we need to post-process the video in ~ffmpeg~ to get the orientation right:
#+begin_src bash :results output :exports both
ffmpeg -y -i output.avi \
       -vf "transpose=0,transpose=0" \
       -c:v libx264 -crf 22 transposed.mp4
#+end_src

#+RESULTS:

Grabbing the last frame:
#+begin_src bash :results output :exports both
ffmpeg -y -sseof -3 -i transposed.mp4 -vsync 0 -update true out2.png
#+end_src

#+RESULTS:

[[file:out2.png]]
*** $\tau = \begin{bmatrix}1 &  1 & -1\end{bmatrix}^T, t = \SI{4}{\second}$
Running our simulation with the specified parameters:
#+begin_src matlab :session :exports both :results code output
tau = [1; 1; -1];
out = sim('exercise3', 4);
Q_last = out.Q.Data(:,:,end)
#+end_src

#+RESULTS:
#+begin_src matlab
Q_last =
    0.5181    0.7957    0.3137
   -0.3138    0.5181   -0.7957
   -0.7957    0.3138    0.5181
#+end_src

Note the video stream coming from the VR Sink is in a slightly different format than what is expected from the To Multimedia File block, we need to post-process the video in ~ffmpeg~ to get the orientation right:
#+begin_src bash :results output :exports both
ffmpeg -y -i output.avi \
       -vf "transpose=0,transpose=0" \
       -c:v libx264 -crf 22 transposed.mp4
#+end_src

#+RESULTS:

Grabbing the last frame:
#+begin_src bash :results output :exports both
ffmpeg -y -sseof -3 -i transposed.mp4 -vsync 0 -update true out3.png
#+end_src

#+RESULTS:

[[file:out3.png]]

* Exercise 4
Write a Simulink block to integrate the quaternion, with the same $\tau$ and $\omega$ as in Exercise 3.
Generate the rotation matrix, animate the motion.
How about $q(t)$, does it remain a "unit" quaternion?
Propose and implement a method to fix this.
Discuss.

** Solution
From the notes, the quaternion equivalent of $\dot{Q} = \omega \times Q$ is:
\begin{align*}
\dot{q}
&=
\frac{1}{2}
\begin{bmatrix}
    0 \\ \omega
\end{bmatrix}
\circ
q
\end{align*}

The question does not specify $q(0)$, so I will assume $q(0) = 1 + \munderbar{0}$

We again note that when using numerical methods with finite precision $q$ will not remain a unit quaternion, and so we need to normalize after integration to ensure it stays unit length.

Creating our Simulink model[fn:transpose]:
#+begin_src matlab :session :exports none :results none
% dummy value so system loads properly
tau = [0; 0; 1];
open_system('exercise4');
print -dsvg -s 'exercise4.svg'
#+end_src

#+begin_src bash :results output :exports none
inkscape exercise4.svg --export-text-to-path --export-plain-svg -o exercise4_fixed.svg
#+end_src

#+RESULTS:

[[file:exercise4_fixed.svg]]

[fn:transpose] Transposing (inverting) the rotation matrix is necessary because the ~Quaternions to Direction Cosine Matrix~ block internally transposes the result, see https://www.mathworks.com/help/aeroblks/quaternionstodirectioncosinematrix.html for details.
*** $\tau = \begin{bmatrix}0 &  0 & 1 \end{bmatrix}^T, t = \SI{5}{\second}$
Running our simulation with the specified parameters:
#+begin_src matlab :session :exports both :results code output
tau = [0; 0; 1];
out = sim('exercise4', 5);
Q_last = out.Q.Data(:,:,end)
quat_last = out.quat.Data(end,:)'
#+end_src

#+RESULTS:
#+begin_src matlab
Q_last =
    0.9978    0.0663         0
   -0.0663    0.9978         0
         0         0    1.0000
quat_last =
    0.9994
         0
         0
   -0.0332
#+end_src

Note the video stream coming from the VR Sink is in a slightly different format than what is expected from the To Multimedia File block, we need to post-process the video in ~ffmpeg~ to get the orientation right:
#+begin_src bash :results output :exports both
ffmpeg -y -i output.avi \
       -vf "transpose=0,transpose=0" \
       -c:v libx264 -crf 22 transposed.mp4
#+end_src

#+RESULTS:

Grabbing the last frame:
#+begin_src bash :results output :exports both
ffmpeg -y -sseof -3 -i transposed.mp4 -vsync 0 -update true out4.png
#+end_src

#+RESULTS:

[[file:out4.png]]


*** $\tau = \begin{bmatrix}0 & -1 & 1 \end{bmatrix}^T, t = \SI{8}{\second}$
Running our simulation with the specified parameters:
#+begin_src matlab :session :exports both :results code output
tau = [0; -1; 1];
out = sim('exercise4', 8);
Q_last = out.Q.Data(:,:,end)
quat_last = out.quat.Data(end,:)'
#+end_src

#+RESULTS:
#+begin_src matlab
Q_last =
    0.2940   -0.6759   -0.6759
    0.6759    0.6470   -0.3530
    0.6759   -0.3530    0.6470
quat_last =
   -0.8044
         0
    0.4201
   -0.4201
#+end_src

Note the video stream coming from the VR Sink is in a slightly different format than what is expected from the To Multimedia File block, we need to post-process the video in ~ffmpeg~ to get the orientation right:
#+begin_src bash :results output :exports both
ffmpeg -y -i output.avi \
       -vf "transpose=0,transpose=0" \
       -c:v libx264 -crf 22 transposed.mp4
#+end_src

#+RESULTS:

Grabbing the last frame:
#+begin_src bash :results output :exports both
ffmpeg -y -sseof -3 -i transposed.mp4 -vsync 0 -update true out5.png
#+end_src

#+RESULTS:

[[file:out5.png]]
*** $\tau = \begin{bmatrix}1 &  1 & -1\end{bmatrix}^T, t = \SI{4}{\second}$
Running our simulation with the specified parameters:
#+begin_src matlab :session :exports both :results code output
tau = [1; 1; -1];
out = sim('exercise4', 4);
Q_last = out.Q.Data(:,:,end)
quat_last = out.quat.Data(end,:)'
#+end_src

#+RESULTS:
#+begin_src matlab
Q_last =
    0.5181    0.7957    0.3137
   -0.3138    0.5181   -0.7957
   -0.7957    0.3138    0.5181
#+end_src

Note the video stream coming from the VR Sink is in a slightly different format than what is expected from the To Multimedia File block, we need to post-process the video in ~ffmpeg~ to get the orientation right:
#+begin_src bash :results output :exports both
ffmpeg -y -i output.avi \
       -vf "transpose=0,transpose=0" \
       -c:v libx264 -crf 22 transposed.mp4
#+end_src

#+RESULTS:

Grabbing the last frame:
#+begin_src bash :results output :exports both
ffmpeg -y -sseof -3 -i transposed.mp4 -vsync 0 -update true out6.png
#+end_src

#+RESULTS:

[[file:out6.png]]

* Exercise 5
** Question 1
Show that for any
$x \in \mathbb{R}^4$,
$x^T e^{\theta(\hat{s} \circ)} x = \cos{\theta}\norm{x}^2$,
where
$e^{\theta (\hat{s}\circ)}$
is given in equation (34), p.6 of the quaternion handout.

*** Solution
The equation referenced is:
\begin{equation*}
e^{\theta(\hat{s}\circ)}
=
\operatorname{exp}
\left\{
    \theta
    \begin{bmatrix}
        0       & -\hat{s}^T \\
        \hat{s} & -\hat{s}\times
    \end{bmatrix}
\right\}
=
\cos{\theta}I + \sin{\theta}
\begin{bmatrix}
    0       & -\hat{s}^T \\
    \hat{s} & -\hat{s}\times
\end{bmatrix}
\end{equation*}
We also note that:
\begin{align*}
\norm{x}^2
&\triangleq
x^T x\\
&\triangleq
d_x^2 + a_x^2 + b_x^2 + c_x^2
\end{align*}

Using the right most expression to expand the given equation:
\begin{align*}
x^T e^{\theta(\hat{s} \circ)} x
&=
x^T
\left(
    \cos{\theta}I + \sin{\theta}
    \begin{bmatrix}
        0       & -\hat{s}^T \\
        \hat{s} & -\hat{s}\times
    \end{bmatrix}
\right)
x \\
&=
x^T
\cos{\theta}I
x
+
x^T
\sin{\theta}
\begin{bmatrix}
    0       & -\hat{s}^T \\
    \hat{s} & -\hat{s}\times
\end{bmatrix}
x
\end{align*}

With some manipulation of the first term:
\begin{align*}
x^T e^{\theta(\hat{s} \circ)} x
&=
x^T
\cos{\theta}I
x
+
x^T
\sin{\theta}
\begin{bmatrix}
    0       & -\hat{s}^T \\
    \hat{s} & -\hat{s}\times
\end{bmatrix}
x \\
&=
\cos{\theta}
(x^Tx)
+
x^T
\sin{\theta}
\begin{bmatrix}
    0       & -\hat{s}^T \\
    \hat{s} & -\hat{s}\times
\end{bmatrix}
x \\
&=
\cos{\theta}
(d_x^2 + a_x^2 + b_x^2 + c_x^2)
+
x^T
\sin{\theta}
\begin{bmatrix}
    0       & -\hat{s}^T \\
    \hat{s} & -\hat{s}\times
\end{bmatrix}
x \\
&=
\cos{\theta}
\norm{x}^2
+
x^T
\sin{\theta}
\begin{bmatrix}
    0       & -\hat{s}^T \\
    \hat{s} & -\hat{s}\times
\end{bmatrix}
x \\
\end{align*}
We see that we already have the desired value in the first term, now we have to prove that the second term is equal to $0$.
\begin{align*}
x^T e^{\theta(\hat{s} \circ)} x
&=
\cos{\theta}
\norm{x}^2
+
x^T
\sin{\theta}
\begin{bmatrix}
    0       & -\hat{s}^T \\
    \hat{s} & -\hat{s}\times
\end{bmatrix}
x \\
&=
\cos{\theta}
\norm{x}^2
+
\sin{\theta}
\left(
    x^T
    \begin{bmatrix}
        0       & -\hat{s}^T \\
        \hat{s} & -\hat{s}\times
    \end{bmatrix}
    x
\right) \\
&=
\cos{\theta}
\norm{x}^2
+
\sin{\theta}
\left(
    \begin{bmatrix}
        d_x & a_x & b_x & c_x
    \end{bmatrix}
    \begin{bmatrix}
        0   & -a_s & -b_s & -c_s \\
        a_s &  0   & -c_s &  b_s \\
        b_s &  c_s &  0   & -a_s \\
        c_s & -b_s &  a_s &  0 
    \end{bmatrix}
    \begin{bmatrix}
        d_x \\ a_x \\ b_x \\ c_x
    \end{bmatrix}
\right) \\
&=
\cos{\theta}
\norm{x}^2
+
\sin{\theta}
\left(
    \begin{bmatrix}
        d_x & a_x & b_x & c_x
    \end{bmatrix}
    \begin{bmatrix}
        -a_s a_x - b_s b_x - c_s c_x \\
         a_s d_x - c_s b_x + b_s c_x \\
         b_s d_x + c_s a_x - a_s c_x \\
         c_s d_x - b_s a_x + a_s b_x
    \end{bmatrix}
\right) \\
&=
\cos{\theta}
\norm{x}^2
+
\sin{\theta}
(
    d_x(-a_s a_x - b_s b_x - c_s c_x)
    + a_x(a_s d_x - c_s b_x + b_s c_x) \\
&\phantomrel{=}
\hphantom{
    \cos{\theta}
    \norm{x}^2
    +
    \sin{\theta}
}
    + b_x(b_s d_x + c_s a_x - a_s c_x)
    + c_x(c_s d_x - b_s a_x + a_s b_x)
) \\
&=
\cos{\theta}
\norm{x}^2
+
\sin{\theta}
(
    -d_x a_s a_x
    -d_x b_s b_x
    -d_x c_s c_x
    +a_x a_s d_x
    -a_x c_s b_x
    +a_x b_s c_x \\
&\phantomrel{=}
\hphantom{
    \cos{\theta}
    \norm{x}^2
    +
    \sin{\theta}
}
    +b_x b_s d_x
    +b_x c_s a_x
    -b_x a_s c_x
    +c_x c_s d_x
    -c_x b_s a_x
    +c_x a_s b_x
)
\end{align*}
Rearranging to group like terms:
\begin{align*}
x^T e^{\theta(\hat{s} \circ)} x
&=
\cos{\theta}
\norm{x}^2
+
\sin{\theta}
(
    -d_x a_s a_x
    -d_x b_s b_x
    -d_x c_s c_x
    +a_x a_s d_x
    -a_x c_s b_x
    +a_x b_s c_x \\
&\phantomrel{=}
\hphantom{
    \cos{\theta}
    \norm{x}^2
    +
    \sin{\theta}
}
    +b_x b_s d_x
    +b_x c_s a_x
    -b_x a_s c_x
    +c_x c_s d_x
    -c_x b_s a_x
    +c_x a_s b_x
) \\
&=
\cos{\theta}
\norm{x}^2
+
\sin{\theta}
(
    \cancelto{0}{
        (
            d_x a_x a_s
            -d_x a_x a_s
        )
    }
    +
    \cancelto{0}{
        (
            d_x b_x b_s
            -d_x b_x b_s
        )
    }
    +
    \cancelto{0}{
        (
            d_x c_x c_s
            -d_x c_x c_s
        )
    }
    \\
&\phantomrel{=}
\hphantom{
    \cos{\theta}
    \norm{x}^2
    +
    \sin{\theta}
}
    +
    \cancelto{0}{
        (
            a_x b_x c_s
            -a_x b_x c_s
        )
    }
    +
    \cancelto{0}{
        (
            a_x c_x b_s
            -a_x c_x b_s
        )
    }
    +
    \cancelto{0}{
        (
            b_x c_x a_s
            -b_x c_x a_s
        )
    }
) \\
&=
\cos{\theta}
\norm{x}^2
+
\sin{\theta}(0) \\
&=
\cos{\theta}
\norm{x}^2
\end{align*}

** Question 2
Consider the function
$f : \mathbb{R}^4 \to \mathbb{R}^4$
defined by the quaternion product
$f(x) = (d + ai)x(d + ai)^{-1}$
(or in vector form
$(d + a\munderbar{i}) \circ (d_x + \munderbar{v}_x) \circ (d + a\munderbar{i})^{-1}$),
similarly to eq (45) p. 9 of the notes on Quaternions but with $x$ and $f(x)$ in $\mathbb{R}^4$.
Also define
$f_l(x) = (d + ai)x$
and
$f_r(x) = x(d + ai)^{-1}$,
$f_l, f_r : \mathbb{R}^4 \to \mathbb{R}^4$.
Clearly, $f_l$, $f_r$, and $f$ are linear.
Find their matrix representations.
What do each of these functions represent, geometrically?
*** Solution
**** $f(x)$
We need to find
$f(1)$, $f(i)$, $f(j)$, $f(k)$,
then form
$f(x) = d_x f(1) + a_x f(i) + b_x f(j) + c_x f(k)$

Finding $f(1)$:
\begin{align*}
f(1)
&=
(d + ai)(1)(d + ai)^{-1} \\
&=
(d + ai)\frac{(d + ai)^*}{d^2 + a^2} \\
&=
\frac{
    (d + ai)(d - ai)
}{
    d^2 + a^2
} \\
&=
\frac{
    d^2 - dai + dai - a^2i^2
}{
    d^2 + a^2
} \\
&=
\frac{
    d^2 + a^2
}{
    d^2 + a^2
} \\
&= 1
\end{align*}

Finding $f(i)$:
\begin{align*}
f(i)
&=
(d + ai)i(d + ai)^{-1} \\
&=
(di + ai^2)\frac{(d + ai)^*}{d^2 + a^2} \\
&=
\frac{
    (di - a)(d - ai)
}{
    d^2 + a^2
} \\
&=
\frac{
    d^2i - dai^2 - da + a^2i
}{
    d^2 + a^2
} \\
&=
\frac{
    d^2i + da - da + a^2i
}{
    d^2 + a^2
} \\
&=
\frac{
    d^2i + a^2i
}{
    d^2 + a^2
} \\
&= i
\end{align*}

Finding $f(j)$:
\begin{align*}
f(j)
&=
(d + ai)j(d + ai)^{-1} \\
&=
(dj + aij)\frac{(d + ai)^*}{d^2 + a^2} \\
&=
\frac{
    (dj + ak)(d - ai)
}{
    d^2 + a^2
} \\
&=
\frac{
    d^2j - daji + dak - a^2ki
}{
    d^2 + a^2
} \\
&=
\frac{
    d^2j + dak + dak - a^2j
}{
    d^2 + a^2
} \\
&=
\frac{
    d^2 - a^2
}{
    d^2 + a^2
} j
+
\frac{
    2da
}{
    d^2 + a^2
} k
\end{align*}

Finding $f(k)$:
\begin{align*}
f(k)
&=
(d + ai)k(d + ai)^{-1} \\
&=
(dk + aik)\frac{(d + ai)^*}{d^2 + a^2} \\
&=
\frac{
    (dk - aj)(d - ai)
}{
    d^2 + a^2
} \\
&=
\frac{
    d^2k - daki - daj + a^2ji
}{
    d^2 + a^2
} \\
&=
\frac{
    d^2k - daj - daj + a^2ji
}{
    d^2 + a^2
} \\
&=
+
\frac{
    -2da
}{
    d^2 + a^2
} j
+
\frac{
    d^2 - a^2
}{
    d^2 + a^2
} k
\end{align*}

The matrix representation of $f$ is then:
\begin{align*}
A_f
&=
\begin{bmatrix}
1 & 0 & 0                           & 0 \\
0 & 1 & 0                           & 0 \\
0 & 0 & \frac{d^2 - a^2}{d^2 + a^2} & \frac{-2da}{d^2 + a^2} \\
0 & 0 & \frac{2da}{d^2 + a^2}       & \frac{d^2 - a^2}{d^2 + a^2}
\end{bmatrix}
\end{align*}

**** Geometric Interpretation of $A_f$
If we let
\begin{align*}
\cos{\theta}
&=
\frac{d}{\sqrt{d^2 + a^2}}
&
\sin{\theta}
&=
\frac{a}{\sqrt{d^2 + a^2}}
\end{align*}

Then we can substitute into $A_f$:
\begin{align*}
A_f
&=
\begin{bmatrix}
1 & 0 & 0                               &  0 \\
0 & 1 & 0                               &  0 \\
0 & 0 & \cos^2{\theta} - \sin^2{\theta} & -2\cos{\theta}\sin{\theta} \\
0 & 0 & 2\cos{\theta}\sin{\theta}       &  \cos^2{\theta} - \sin^2{\theta}
\end{bmatrix} \\
&=
\begin{bmatrix}
1 & 0 & 0             &  0 \\
0 & 1 & 0             &  0 \\
0 & 0 & \cos{2\theta} & -\sin{2\theta} \\
0 & 0 & \sin{2\theta} &  \cos{2\theta}
\end{bmatrix}
\end{align*}

Which as expected is the rotation matrix about the $i\text{-axis}$ of angle $2\theta$ in $\mathbb{R}^4$.
It also happens to map cleanly as a rotation about the $i\text{-axis}$ in $\mathbb{R}^3$ if you take $d_x$ to be $0$ and $v_x$ to be the coordinates of a vector in $\mathbb{R}^3$.
**** $f_l(x)$
We need to find
$f_l(1)$, $f_l(i)$, $f_l(j)$, $f_l(k)$,
then form
$f_l(x) = d_x f_l(1) + a_x f_l(i) + b_x f_l(j) + c_x f_l(k)$

Finding $f_l(1)$:
\begin{align*}
f_l(1)
&=
(d + ai)(1) \\
&=
d + ai
\end{align*}

Finding $f_l(i)$:
\begin{align*}
f_l(i)
&=
(d + ai)i \\
&=
di + ai^2
&=
-a + di
\end{align*}

Finding $f_l(j)$:
\begin{align*}
f_l(j)
&=
(d + ai)j \\
&=
dj + aij \\
&=
dj + ak
\end{align*}

Finding $f_l(k)$:
\begin{align*}
f_l(k)
&=
(d + ai)k \\
&=
dk + aik \\
&=
-aj + dk
\end{align*}

The matrix representation of $f_l$ is then:
\begin{align*}
A_{f_l}
&=
\begin{bmatrix}
d & -a & 0 &  0 \\
a &  d & 0 &  0 \\
0 &  0 & d & -a \\
0 &  0 & a &  d
\end{bmatrix}
\end{align*}

**** $f_r(x)$
We need to find
$f_r(1)$, $f_r(i)$, $f_r(j)$, $f_r(k)$,
then form
$f_r(x) = d_x f_r(1) + a_x f_r(i) + b_x f_r(j) + c_x f_r(k)$

Finding $f_r(1)$:
\begin{align*}
f_r(1)
&=
(1)(d + ai)^{-1} \\
&=
\frac{(d + ai)^*}{d^2 + a^2} \\
&=
\frac{
    d - ai
}{
    d^2 + a^2
} \\
&=
\frac{
    d
}{
    d^2 + a^2
}
+
\frac{
    -a
}{
    d^2 + a^2
} i
\end{align*}

Finding $f_r(i)$:
\begin{align*}
f_r(i)
&=
i(d + ai)^{-1} \\
&=
i\frac{(d + ai)^*}{d^2 + a^2} \\
&=
i
\frac{
    d - ai
}{
    d^2 + a^2
} \\
&=
\frac{
    di - ai^2
}{
    d^2 + a^2
} \\
&=
\frac{
    a
}{
    d^2 + a^2
}
+
\frac{
    d
}{
    d^2 + a^2
} i
\end{align*}

Finding $f_r(j)$:
\begin{align*}
f_r(j)
&=
j(d + ai)^{-1} \\
&=
j\frac{(d + ai)^*}{d^2 + a^2} \\
&=
j
\frac{
    d - ai
}{
    d^2 + a^2
} \\
&=
\frac{
    dj - aji
}{
    d^2 + a^2
} \\
&=
\frac{
    d
}{
    d^2 + a^2
} j
+
\frac{
    a
}{
    d^2 + a^2
} k \\
\end{align*}

Finding $f_r(k)$:
\begin{align*}
f_r(k)
&=
k(d + ai)^{-1} \\
&=
k\frac{(d + ai)^*}{d^2 + a^2} \\
&=
k
\frac{
    d - ai
}{
    d^2 + a^2
} \\
&=
\frac{
    dk - aki
}{
    d^2 + a^2
} \\
&=
\frac{
    -a
}{
    d^2 + a^2
} j
+
\frac{
    d
}{
    d^2 + a^2
} k
\end{align*}

The matrix representation of $f_r$ is then:
\begin{align*}
A_{f_r}
&=
\frac{1}{d^2 + a^2}
\begin{bmatrix}
     d & a & 0 &  0 \\
    -a & d & 0 &  0 \\
     0 & 0 & d & -a \\
     0 & 0 & a &  d
\end{bmatrix}
\end{align*}

**** Geometric Interpretation of $A_{f_l}$ and $A_{f_r}$
If we let
\begin{align*}
\cos{\theta}
&=
\frac{d}{\sqrt{d^2 + a^2}}
&
\sin{\theta}
&=
\frac{a}{\sqrt{d^2 + a^2}}
\end{align*}

Then we can substitute into $A_{f_l}$ and $A_{f_r}$:
\begin{align*}
A_{f_l}
&=
\sqrt{d^2 + a^2}
\begin{bmatrix}
\cos{\theta} & -\sin{\theta} & 0            & 0 \\
\sin{\theta} &  \cos{\theta} & 0            & 0 \\
0           &   0            & \cos{\theta} & -\sin{\theta} \\
0           &   0            & \sin{\theta} &  \cos{\theta} \\
\end{bmatrix}
&
A_{f_r}
&=
\frac{1}{\sqrt{d^2 + a^2}}
\begin{bmatrix}
 \cos{\theta} & \sin{\theta} & 0            & 0 \\
-\sin{\theta} & \cos{\theta} & 0            & 0 \\
 0            &   0          & \cos{\theta} & -\sin{\theta} \\
 0            &   0          & \sin{\theta} &  \cos{\theta} \\
\end{bmatrix}
\end{align*}

Using the trig identities, $\cos{-\theta} = \cos{\theta}, \sin{-\theta} = -\sin{\theta}$:

\begin{align*}
A_{f_r}
&=
\frac{1}{\sqrt{d^2 + a^2}}
\begin{bmatrix}
\cos{-\theta} & -\sin{-\theta} & 0            & 0 \\
\sin{-\theta} &  \cos{-\theta} & 0            & 0 \\
0             &   0            & \cos{\theta} & -\sin{\theta} \\
0             &   0            & \sin{\theta} &  \cos{\theta} \\
\end{bmatrix}
\end{align*}


We can see that $A_{f_l}$ scales a quaternion by $\sqrt{d^2 + a^2}$, simultaneously rotates the $1\text{-}i$ and $j\text{-}k$ planes by $\theta$, while $A_{f_r}$ scales by $\frac{1}{\sqrt{d^2 + a^2}}$ and rotates the $1\text{-}i$ plane by $-\theta$ and the $j\text{-}k$ plane by $\theta$.

Intuitively this makes sense, we expect that when multiplied together these matrices produce a pure rotation around the $i\text{-axis}$, this is shown by:
- the scaling factors multiply to $1$
- the rotation in the $1\text{-}i$ plane (i.e. the plane parallel to $i$) undergoes zero rotation (rotates $\theta$ in one direction, then $\theta$ back in the other direction)
- the rotation in the $j\text{-}k$ plane (i.e. the plane normal to $i$) goes through a rotation of $\theta + \theta = 2\theta$
