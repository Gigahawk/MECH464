#+TITLE: MECH 464 Homework Assignment 2
#+AUTHOR: Jasper Chan - 37467164 @@latex:\\@@ jasperchan515@gmail.com

#+OPTIONS: toc:nil H:5 num:t


#+LATEX_HEADER: \definecolor{bg}{rgb}{0.95,0.95,0.95}
#+LATEX_HEADER: \setminted{frame=single,bgcolor=bg,samepage=true}
#+LATEX_HEADER: \setlength{\parindent}{0pt}
#+LATEX_HEADER: \sisetup{per-mode=fraction}
#+LATEX_HEADER: \usepackage[shellescape]{gmp}
#+LATEX_HEADER: \usepackage{gauss}
#+LATEX_HEADER: \usepackage{float}
#+LATEX_HEADER: \usepackage{svg}
#+LATEX_HEADER: \usepackage{cancel}
#+LATEX_HEADER: \usepackage{amssymb}
#+LATEX_HEADER: \usepackage{accents}
#+LATEX_HEADER: \usepackage{titlesec}
#+LATEX_HEADER: \usepackage{mathtools, nccmath}
#+LATEX_HEADER: \newcommand{\Lwrap}[1]{\left\{#1\right\}}
#+LATEX_HEADER: \newcommand{\Lagr}[1]{\mathcal{L}\Lwrap{#1}}
#+LATEX_HEADER: \newcommand{\Lagri}[1]{\mathcal{L}^{-1}\Lwrap{#1}}
#+LATEX_HEADER: \newcommand{\Ztrans}[1]{\mathcal{Z}\Lwrap{#1}}
#+LATEX_HEADER: \newcommand{\Ztransi}[1]{\mathcal{Z}^{-1}\Lwrap{#1}}
#+LATEX_HEADER: \newcommand{\ZOH}[1]{\text{ZOH}\left(#1\right)}
#+LATEX_HEADER: \DeclarePairedDelimiter{\ceil}{\lceil}{\rceil}
#+LATEX_HEADER: \makeatletter \AtBeginEnvironment{minted}{\dontdofcolorbox} \def\dontdofcolorbox{\renewcommand\fcolorbox[4][]{##4}} \makeatother
#+LATEX_HEADER: \titleformat{\paragraph}[hang]{\normalfont\normalsize\bfseries}{\theparagraph}{1em}{}
#+LATEX_HEADER: \titlespacing*{\paragraph}{0pt}{3.25ex plus 1ex minus .2ex}{0.5em}
#+LATEX_HEADER: \setcounter{secnumdepth}{5}
#+LATEX_HEADER: \newcommand\munderbar[1]{\underaccent{\bar}{#1}}
#+LATEX_HEADER: \newcommand\dmunderbar[1]{\munderbar{\munderbar{#1}}}

* Exercise 1
Find the inverse of the following $4 \times 4$ matrix, where the $3 \times 3$ matrix is a rotation.

\begin{equation*}
\begin{bmatrix}
    Q   & d \\
    0^T & 1
\end{bmatrix}
\end{equation*}

** Solution
The blockwise matrix inversion formula is given as:
\begin{align*}
\begin{bmatrix}
    \mathbf{A} & \mathbf{B} \\
    \mathbf{C} & \mathbf{D}
\end{bmatrix}^{-1}
&=
\begin{bmatrix}
    \mathbf{A}^{-1} + \mathbf{A}^{-1}\mathbf{B}\left(\mathbf{D} - \mathbf{CA}^{-1}\mathbf{B}\right)^{-1}\mathbf{CA}^{-1} &
    -\mathbf{A}^{-1}\mathbf{B}\left(\mathbf{D} - \mathbf{CA}^{-1}\mathbf{B}\right)^{-1} \\
    -\left(\mathbf{D} - \mathbf{CA}^{-1}\mathbf{B}\right)^{-1}\mathbf{CA}^{-1} &
    \left(\mathbf{D} - \mathbf{CA}^{-1}\mathbf{B}\right)^{-1}
\end{bmatrix}
\end{align*}

We note that the only blocks that need to be inverted are $\mathbf{A}$ and $\mathbf{D} - \mathbf{CA}^{-1}\mathbf{B}$.

For the first block, we are given $\mathbf{A} = Q$, which is a proper rotation matrix.
The inverse of a rotation matrix $Q^{-1}$ is just the transpose $Q^T$.

Subbing in the values for the other block:
\begin{align*}
\left(\mathbf{D} - \mathbf{CA}^{-1}\mathbf{B}\right)^{-1}
&=
\left(
    (1) - (0^T)(Q^T)(d)
\right)^{-1} \\
&= (1)^{-1} \\
&= 1
\end{align*}

Subbing everything in:
\begin{align*}
\begin{bmatrix}
Q   & d \\
0^T & 1
\end{bmatrix}^{-1}
&=
\begin{bmatrix}
    Q^T + Q^Td\left(1 - 0Q^Td\right)^{-1}0Q^T &
    -Q^Td\left(1 - 0Q^Td\right)^{-1} \\
    -\left(1 - 0Q^Td\right)^{-1}0Q^T &
    \left(1 - 0Q^Td\right)^{-1}
\end{bmatrix} \\
&=
\begin{bmatrix}
    Q^T &
    -Q^Td \\
    0^T &
    1
\end{bmatrix} \\
\end{align*}

* Exercise 2
** Question 1
A vector product function is specified as
$\dmunderbar{f}(x) = (-2\munderbar{i}_0 + 3\munderbar{j}_0 - 5\munderbar{k}_0) \times \munderbar{x}$.

What is the matrix representation of
$\dmunderbar{f}$
in
$\munderbar{C}_0 = \begin{bmatrix}\munderbar{i}_0 & \munderbar{j}_0 & \munderbar{k}_0\end{bmatrix}$?

What is the matrix representation of
$\dmunderbar{f}$
in
$\munderbar{C}_1 = \begin{bmatrix}\munderbar{i}_1 & \munderbar{j}_1 & \munderbar{k}_1\end{bmatrix} = \begin{bmatrix}-\munderbar{i}_0 & -\munderbar{j}_0 & \munderbar{k}_0\end{bmatrix}$?
*** Solution
**** Matrix representation in \underbar{$C$}_0
Rewriting the provided definition of $\munderbar{C}_0$:
\begin{align*}
\dmunderbar{f}(x)
&=
\munderbar{C}_0
\underbrace{
    \begin{bmatrix}
        -2 \\ 3 \\ -5
    \end{bmatrix}
}_{^0s}
\times \munderbar{x}
\end{align*}

We can then group the vector with the skew operator:
\begin{align*}
\dmunderbar{f}(x)
&=
\munderbar{C}_0
\underbrace{
    \left(
        \begin{bmatrix}
            -2 \\ 3 \\ -5
        \end{bmatrix}
        \times
    \right)
}_{^0s \times}
\munderbar{x}
\\
&=
\munderbar{C}_0
\begin{bmatrix}
     0 &  5 & 3 \\
    -5 &  0 & 2 \\
    -3 & -2 & 0
\end{bmatrix}
\munderbar{x}
\end{align*}
The matrix representation of the function is then:
\begin{align*}
{^0s} \times
&=
\begin{bmatrix}
     0 &  5 & 3 \\
    -5 &  0 & 2 \\
    -3 & -2 & 0
\end{bmatrix}
\end{align*}
**** Matrix representation in \underbar{$C$}_1
We note that
\begin{align*}
\munderbar{C}_0 &= \munderbar{C}_1 {^1C_0}
\end{align*}

If we sub in the definitions of $\munderbar{C}_{0,1}$ using the $\munderbar{C}_0$ unit vectors and solve for ${^1C_0}$[fn:transformmatrix]:
\begin{align*}
\begin{bmatrix}
    \munderbar{i}_0 &
    \munderbar{j}_0 &
    \munderbar{k}_0
\end{bmatrix}
&=
\begin{bmatrix}
    -\munderbar{i}_0 &
    -\munderbar{j}_0 &
     \munderbar{k}_0
\end{bmatrix}
{^1C_0} \\
&= 
\begin{bmatrix}
    -\munderbar{i}_0 &
    -\munderbar{j}_0 &
     \munderbar{k}_0
\end{bmatrix}
\begin{bmatrix}
    -1 &  0 & 0 \\
     0 & -1 & 0 \\
     0 &  0 & 1
\end{bmatrix}
\end{align*}
[fn:transformmatrix] Coincidentally ${^0C_1} = {^1C_0}$





The matrix representation in $\munderbar{C}_1$ is then:
\begin{align*}
{^1s} \times
&=
\left(
    {^0C_1}
    {^0s}
\right)
\times
\\
&=
\left(
    \begin{bmatrix}
        -1 &  0 & 0 \\
        0 & -1 & 0 \\
        0 &  0 & 1
    \end{bmatrix}
    \begin{bmatrix}
        -2 \\ 3 \\ -5
    \end{bmatrix}
\right)
\times
\\
&=
\begin{bmatrix}
    2 \\ -3 \\ -5
\end{bmatrix}
\times
\\
&=
\begin{bmatrix}
     0 &  5 & -3 \\
    -5 &  0 & -2 \\
     3 &  2 &  0
\end{bmatrix}
\end{align*}
** Question 2
What is the coordinate representation
${^0Q}$
in
$\munderbar{C}_0$
of a rotation
$\munderbar{y} = \dmunderbar{Q}\left(\munderbar{k}_0, \frac{\pi}{2}\right)\munderbar{x}$
about axis
$\munderbar{k}_0$
of angle
$\pi/2$?
*** Solution
The rotation matrix about the $\munderbar{k}$ axis (in any frame) is:
\begin{align*}
R(k, \theta)
\triangleq
\begin{bmatrix}
    \cos\theta & -\sin\theta & 0 \\
    \sin\theta &  \cos\theta & 0 \\
    0          &  0          & 1
\end{bmatrix}
\end{align*}

Subbing in our values:
\begin{align*}
{^0Q}
=
R(k, \frac{\pi}{2})
&=
\begin{bmatrix}
    \cos\frac{\pi}{2} & -\sin\frac{\pi}{2} & 0 \\
    \sin\frac{\pi}{2} &  \cos\frac{\pi}{2} & 0 \\
    0                 &  0                 & 1
\end{bmatrix}
\\
&=
\begin{bmatrix}
    0 & -1 & 0 \\
    1 &  0 & 0 \\
    0 &  0 & 1
\end{bmatrix}
\end{align*}


** Question 3
What is the coordinate representation
${^0R}$
in
$\munderbar{C}_0$
of a rotation
$\munderbar{y} = \dmunderbar{R}\left(\munderbar{i}_0, \frac{\pi}{6}\right)\munderbar{x}$
about axis
$\munderbar{i}_0$
of angle
$\pi/6$?
*** Solution
The rotation matrix about the $\munderbar{i}$ axis (in any frame) is:
\begin{align*}
R(i, \theta)
\triangleq
\begin{bmatrix}
    1 & 0          & 0 \\
    0 & \cos\theta & -\sin\theta \\
    0 & \sin\theta &  \cos\theta 
\end{bmatrix}
\end{align*}

Subbing in our values:
\begin{align*}
{^0Q}
=
R(k, \frac{\pi}{6})
&=
\begin{bmatrix}
    1 & 0                 & 0 \\
    0 & \cos\frac{\pi}{6} & -\sin\frac{\pi}{6} \\
    0 & \sin\frac{\pi}{6} &  \cos\frac{\pi}{6} 
\end{bmatrix}
\\
&=
\begin{bmatrix}
    1 & 0                  & 0 \\
    0 & \frac{\sqrt{3}}{2} & -\frac{1}{2} \\
    0 & \frac{1}{2}        & \frac{\sqrt{3}}{2} 
\end{bmatrix}
\end{align*}
** Question 4
What is the coordinate representation of the composition of the two rotations
$\munderbar{y} = \dmunderbar{R}\left(\munderbar{i}_0, \frac{\pi}{6}\right) \dmunderbar{Q}\left(\munderbar{k}_0, \frac{\pi}{2}\right)\munderbar{x}$
in
$\munderbar{C}_0$?
*** Solution

Multiplying our two rotation matrices together:
\begin{align*}
{^0R}{^0Q}
&=
\begin{bmatrix}
    1 & 0                  &  0 \\
    0 & \frac{\sqrt{3}}{2} & -\frac{1}{2} \\
    0 & \frac{1}{2}        &  \frac{\sqrt{3}}{2} 
\end{bmatrix}
\begin{bmatrix}
    0 & -1 & 0 \\
    1 &  0 & 0 \\
    0 &  0 & 1
\end{bmatrix} \\
&=
\begin{bmatrix}
    0                  & -1 &  0 \\
    \frac{\sqrt{3}}{2} &  0 & -\frac{1}{2} \\
    \frac{1}{2}        &  0 &  \frac{\sqrt{3}}{2}
\end{bmatrix}
\triangleq
{^0S}
\end{align*}
** Question 5
Let
$\munderbar{C}_1$
be the rotated frame
$\munderbar{C}_1 = \dmunderbar{Q}\left(\munderbar{k}_0, \frac{\pi}{2}\right)\munderbar{C}_0$.

What is the coordinate representation of the composition of the two rotations
$\munderbar{y} = \dmunderbar{R}\left(\munderbar{i}_0, \frac{\pi}{6}\right) \dmunderbar{Q}\left(\munderbar{k}_0, \frac{\pi}{2}\right)\munderbar{x}$
in
$\munderbar{C}_1$?
*** Solution
Rewriting the rotated frame using the coordinate representation ${^0Q}$:
\begin{align*}
\munderbar{C}_1
=
\dmunderbar{Q}\left(\munderbar{k}_0, \frac{\pi}{2}\right)\munderbar{C}_0
&=
\munderbar{C}_0\underbrace{^0Q}_{^0C_1}
\end{align*}

The coordinate representation of the composite rotation in $\munderbar{C}_1$ is then:
\begin{align*}
{^1S}
&=
\left(
    {^1C_0}
\right)
{^0S}
\\
&=
\left(
    {^0C_1}
\right)^{-1}
{^0S}
\\
&=
\left(
    {^0Q}
\right)^{-1}
{^0S}
\\
&=
{^0Q}^T
{^0S}
\\
&=
\begin{bmatrix}
     0 & 1 & 0 \\
    -1 & 0 & 0 \\
     0 & 0 & 1
\end{bmatrix}
\begin{bmatrix}
    0                  & -1 &  0 \\
    \frac{\sqrt{3}}{2} &  0 & -\frac{1}{2} \\
    \frac{1}{2}        &  0 &  \frac{\sqrt{3}}{2}
\end{bmatrix} \\
&=
\begin{bmatrix}
    \frac{\sqrt{3}}{2} & 0 & -\frac{1}{2} \\
    0                  & 1 &  0 \\
    \frac{1}{2}        & 0 &  \frac{\sqrt{3}}{2}
\end{bmatrix}
\end{align*}

* Exercise 3
Write a Simulink model to integrate
$\dot{Q} = \omega \times Q$,
$\dot{\omega} = \tau$,
$\omega(0) = 0$,
$Q(0) = I$,
driven by a specified torque $\tau$.
Animate the motion (block provided in Simulink tutorial, can use a frame or other) whose coordinate transformation is given by $Q$.
This corresponds to your animating a rigid body having an inertia matrix equal to the identity.
Does the matrix $Q(t)$ remain a rotation matrix for all $t$ as you integrate it?
If not, how would you fix it?
Provide $Q(t)$ and the animation (or just last image) for the following cases:

1. $\tau = \begin{bmatrix}0 &  0 & 1 \end{bmatrix}^T, t = \SI{5}{\second}$
2. $\tau = \begin{bmatrix}0 & -1 & 1 \end{bmatrix}^T, t = \SI{8}{\second}$
3. $\tau = \begin{bmatrix}1 &  1 & -1\end{bmatrix}^T, t = \SI{4}{\second}$

** Solution
#+begin_src matlab :session :exports none :eval never-export
simulink
#+end_src

#+RESULTS:

First let's define a skew helper function:
#+begin_src matlab :exports code :tangle skew.m :eval never
function sx = skew(s)
    sx = [...
         0    -s(3)  s(2);...
         s(3)  0    -s(1);...
        -s(2)  s(1)  0];
end
#+end_src

As indicated by the question, $Q$ will not remain a rotation matrix since Simulink uses numerical methods with finite precision;
the length of the rotation axis will change over time.

Let's define a helper function to fix this error:
#+begin_src matlab :exports code :tangle ensure_rotation.m :eval never
function Q = ensure_rotation(Q_dirty)
    lambdas = eig(Q_dirty);
    % Get eigenvalue with positive imaginary part
    thetas = imag(log(lambdas));
    theta = thetas(thetas > 0);
    if isempty(theta)
        % No rotation, treat as identity
        Q = eye(3);
        return
    end
    sx_dirty = logm(Q_dirty)/theta;
    s_dirty = [sx_dirty(3, 2); -sx_dirty(3, 1); sx_dirty(2, 1)];
    s = s_dirty/norm(s_dirty);
    Q = expm(theta*skew(s));
end
#+end_src

We also need a scene for our VR Sink to display, so let's define that here:
#+begin_src perl :exports both :tangle SingleBox.wrl :eval
#VRML V2.0 utf8

Viewpoint {
   position 0 -5 5
   orientation 1 0 0 0.78
   fieldOfView 1
   description "Camera 1"
}

DirectionalLight {
    direction 1 1 0
}

DEF Box Transform {
  rotation 0 0 1 0
  children Shape {
    appearance Appearance {
      material Material {
        diffuseColor 1 1 0
      }
    }
    geometry Box {
        size 1 2 3
    }
  }
}
#+end_src

With this, we can create our Simulink model:
#+begin_src matlab :session :exports none :results none
% dummy value so system loads properly
tau = [0; 0; 1];
open_system('exercise3');
print -dsvg -s 'exercise3.svg'
#+end_src

#+begin_src bash :results output :exports none
inkscape exercise3.svg --export-text-to-path --export-plain-svg -o exercise3_fixed.svg
#+end_src

#+RESULTS:

[[file:exercise3_fixed.svg]]


*** $\tau = \begin{bmatrix}0 &  0 & 1 \end{bmatrix}^T, t = \SI{5}{\second}$
Running our simulation with the specified parameters:
#+begin_src matlab :session :exports both :results code output
tau = [0; 0; 1];
out = sim('exercise3', 5);
Q_last = out.Q.Data(:,:,end)
#+end_src

#+RESULTS:
#+begin_src matlab
#+end_src

Note the video stream coming from the VR Sink is in a slightly different format than what is expected from the To Multimedia File block, we need to post-process the video in ~ffmpeg~ to get the orientation right:
#+begin_src bash :results output :exports both
ffmpeg -y -i output.avi \
       -vf "transpose=0,transpose=0" \
       -c:v libx264 -crf 22 transposed.mp4
#+end_src

#+RESULTS:

Grabbing the last frame:
#+begin_src bash :results output :exports both
ffmpeg -y -sseof -3 -i transposed.mp4 -vsync 0 -update true out1.png
#+end_src

#+RESULTS:

[[file:out1.png]]


*** $\tau = \begin{bmatrix}0 & -1 & 1 \end{bmatrix}^T, t = \SI{8}{\second}$
Running our simulation with the specified parameters:
#+begin_src matlab :session :exports both :results code output
tau = [0; -1; 1];
out = sim('exercise3', 8);
Q_last = out.Q.Data(:,:,end)
#+end_src

#+RESULTS:
#+begin_src matlab
Q_last =
    0.3276   -0.6617   -0.6744
    0.6744    0.6637   -0.3236
    0.6617   -0.3489    0.6637
#+end_src

Note the video stream coming from the VR Sink is in a slightly different format than what is expected from the To Multimedia File block, we need to post-process the video in ~ffmpeg~ to get the orientation right:
#+begin_src bash :results output :exports both
ffmpeg -y -i output.avi \
       -vf "transpose=0,transpose=0" \
       -c:v libx264 -crf 22 transposed.mp4
#+end_src

#+RESULTS:

Grabbing the last frame:
#+begin_src bash :results output :exports both
ffmpeg -y -sseof -3 -i transposed.mp4 -vsync 0 -update true out2.png
#+end_src

#+RESULTS:

[[file:out2.png]]
*** $\tau = \begin{bmatrix}1 &  1 & -1\end{bmatrix}^T, t = \SI{4}{\second}$
Running our simulation with the specified parameters:
#+begin_src matlab :session :exports both :results code output
tau = [1; 1; -1];
out = sim('exercise3', 4);
Q_last = out.Q.Data(:,:,end)
#+end_src

#+RESULTS:
#+begin_src matlab
Q_last =
    0.5181    0.7957    0.3137
   -0.3138    0.5181   -0.7957
   -0.7957    0.3138    0.5181
#+end_src

Note the video stream coming from the VR Sink is in a slightly different format than what is expected from the To Multimedia File block, we need to post-process the video in ~ffmpeg~ to get the orientation right:
#+begin_src bash :results output :exports both
ffmpeg -y -i output.avi \
       -vf "transpose=0,transpose=0" \
       -c:v libx264 -crf 22 transposed.mp4
#+end_src

#+RESULTS:

Grabbing the last frame:
#+begin_src bash :results output :exports both
ffmpeg -y -sseof -3 -i transposed.mp4 -vsync 0 -update true out3.png
#+end_src

#+RESULTS:

[[file:out3.png]]



